apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv-prod
  namespace: prod
spec:
  capacity:
    storage: 60Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /srv/nfs/kubedata/
    server: 192.168.1.210
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc-prod
  namespace: prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 60Mi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-prod
  namespace: prod
spec:
  serviceName: "mongodb-service"
  replicas: 2
  selector:
    matchLabels:
      app: mongodb-prod
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9216"
      labels:
        app: mongodb-prod
    spec:
      securityContext:
        fsGroup: 1001
      containers:
      - name: mongodb-prod
        image: mongodb/mongodb-community-server:latest
        imagePullPolicy: IfNotPresent
        args: ["--replSet", "rs0-prod", "--bind_ip_all", "--keyFile", "/data/configdb/mongo-keyfile/mkey"]
        ports:
        - containerPort: 27017
        env:
        - name: MONGODB_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGODB_INITDB_ROOT_PASSWORD
          value: "secret"
        - name: MONGO_REPLICA_SET_NAME
          value: "rs0-prod"
        - name: POD_NAME  # Use the Downward API to inject the Pod name as an env variable
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
          subPathExpr: $(POD_NAME)-db # Use the subPathExpr to inject the Pod name. Not subPath.
        - name: mongodb-keyfile
          mountPath: /data/configdb/mongo-keyfile
          readOnly: true
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
        startupProbe:
          httpGet:
              path: /healthz
              port: 27017
          initialDelaySeconds: 60  # Time before starting the first check
          periodSeconds: 10        # Time between probe executions
          failureThreshold: 30     # How many failures before considering the pod as failed
        # resources:
        #   requests:
        #     cpu: 100m
        #     memory: 128Mi
        #   limits:
        #     cpu: 200m
        #     memory: 256Mi
      - name: mongo-sidecar
        image: mongo:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_ADMIN_USER
          value: "admin"
        - name: MONGO_ADMIN_PASS
          value: "secret"
        - name: MONGO_REPLICA_SET_NAME
          value: "rs0-prod"
        - name: MONGO_PORT
          value: "27017"
        - name: MONGO_AUTH_DB
          value: "admin"
        - name: MONGO_REPLICA_SET_SIZE
          value: "2"  # Set the default replica set size (override with environment variable if different)
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - "sh"
        - "-c"
        - |
          check_pod_ready() {
            POD_HOST=$1
            until mongosh --host "$POD_HOST" --username "$MONGO_ADMIN_USER" --password "$MONGO_ADMIN_PASS" --authenticationDatabase "$MONGO_AUTH_DB" --eval 'db.runCommand("ping").ok' --quiet | grep 1; do
              echo "Waiting for $POD_HOST to be ready..."
              sleep 10
            done
            echo "$POD_HOST is ready!"
          }
    
          # Loop to check readiness for each replica pod
            for i in $(seq 0 $((MONGO_REPLICA_SET_SIZE - 1))); do
              check_pod_ready "mongodb-prod-${i}.mongodb-service.prod.svc.cluster.local:$MONGO_PORT"
            done
    
          # Build the members array for rs.initiate dynamically
            INITIATE_SCRIPT="rs.initiate({ _id: '$MONGO_REPLICA_SET_NAME', members: ["
            for i in $(seq 0 $((MONGO_REPLICA_SET_SIZE - 1))); do
              INITIATE_SCRIPT="${INITIATE_SCRIPT}{ _id: $i, host: 'mongodb-prod-${i}.mongodb-service.prod.svc.cluster.local:$MONGO_PORT' },
            done
          # Trim trailing comma and close the members array
          INITIATE_SCRIPT="${INITIATE_SCRIPT%?} ] });"
    
          # Check if the replica set is already initialized
            if mongosh --host "mongodb-prod-0.mongodb-service.prod.svc.cluster.local" --username "$MONGO_ADMIN_USER" --password "$MONGO_ADMIN_PASS" --authenticationDatabase "$MONGO_AUTH_DB" --eval 'rs.status().ok' --quiet | grep 1; then
              echo "Replica set already initialized"
            else
              echo "Initializing replica set with $MONGO_REPLICA_SET_SIZE members"
              mongosh --host "mongodb-prod-0.mongodb-service.prod.svc.cluster.local" --username "$MONGO_ADMIN_USER" --password "$MONGO_ADMIN_PASS" --authenticationDatabase "$MONGO_AUTH_DB" --eval "$INITIATE_SCRIPT"
            fi
    
          # Keep the sidecar running to monitor replica set status
            while true; do
              sleep 300
            done

      - name: mongo-exporter
        image: bitnami/mongodb-exporter
        imagePullPolicy: IfNotPresent
        args:
        - --mongodb.uri=mongodb://$(MONGODB_INITDB_ROOT_USERNAME):$(MONGODB_INITDB_ROOT_PASSWORD)@mongodb-service.prod.svc.cluster.local:27017/admin
        - --collect-all
        ports:
        - containerPort: 9216
        env:
        - name: MONGODB_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGODB_INITDB_ROOT_PASSWORD
          value: "secret"
        - name: MONGO_REPLICA_SET_NAME
          value: "rs0-prod"
        - name: POD_NAME  # Use the Downward API to inject the Pod name as an env variable
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        # livenessProbe:
        #   httpGet:
        #     path: /metrics
        #     port: 9216
        #   initialDelaySeconds: 15
        #   periodSeconds: 5
        #   timeoutSeconds: 30
        #   failureThreshold: 3
        #   successThreshold: 1
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9216
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 30
          failureThreshold: 3
          successThreshold: 1
      volumes:
      - name: mongodb-keyfile
        persistentVolumeClaim:
          claimName: mongo-keyfile-pvc-prod
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongo-pvc-prod
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-keyfile-pv-prod
  namespace: prod
spec:
  capacity:
    storage: 1Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /srv/nfs/mongo-keyfile
    server: 192.168.1.210
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-keyfile-pvc-prod
  namespace: prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: prod
  annotations:
    prometheus.io/scrape: "true"
spec:
  clusterIP: None # This makes it a headless service
  selector:
    app: mongodb-prod
  ports:
    - port: 27017
      targetPort: 27017